For my implementation of the code test I decided to write a very simple app that takes the problem into the context of saving a single comment input by the user to a remote data store.

I chose to utilize an asynchronous task for running the save logic. In this implementation, the user inputs a comment into an editText field then presses the save icon button. This will start the async task which performs the logic for saving the comment to a remote data store. In my code I show an example of how the async task could save the data by using a parse implentation as well as using a RESTful web service(in this case HttpURLConnection).

In regards to the comment class, I used a very simple implementation which only has a couple fields that I thought would be relevent to the class in a real world scenario. The important thing to point out is that it implements the 'SavableObject' interface which includes a 'toMap' function. This function is used to construct a map of all the classes variable information into key value pairs. This makes dynamic processing easier as both parse objects(for pasre implementaiton) and JSONObjects(for RESTful web service implementation) can be easily constructed using preconstructed maps. So it is important to note that any class that implements the SavableObjects interface should be able to be saved regardless of the method used for remote storage without changing any of the class code, assuming the toMap method is used. That being said, the only code that should need updating when changing remote storage methods is the code inside the async task.

Even though my implementation is used in the context of a single comment object constructed from info from the UI, this implementation design should also be applicable to lists of varying objects with minor changes to the async tasks code(again, assuming the objects have implemented the SavableObject interface and the toMap method is used).

Side note: When run, this code will make some toast messages appear, one at the start and one at th end of the async task. The save will always be unsuccessful as no real service is being called. Also, there is no validation to check for an empty comment or sql injection etc.
