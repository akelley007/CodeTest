For my implementation of the code test I decided to write a very simple app that takes the problem into the context of saving a single comment input by the user to a remote data store.

I chose to implement a very simple facade class called SaveManager which utilizes a strategy pattern to be able to run the logic of saving the class information to a remote data store dynamically. The SaveManager sets a list of Maps containing class information(in this case only one) to be saved then determines which implementation of the RemoteStoreStrategy interface to use based off of a passed string parameter on initialization. When the save method of the SaveManager is called it will call the chosen implementations save method sending the class data to be saved, so in order to change the strategy of saving the class you only need to update the string passed to the SaveManager(assuming the strategy you would like to use is implemented using the RemoteStoreStrategy interface)

In regards to the comment class, I used a very simple implementation which only has a couple fields that I thought would be relevent to the class in a real world scenario. The important thing to point out is that it implements the 'SavableObject' interface which includes a 'toMap' function. This function is used to construct a map of all the classes variable information into key value pairs. This makes dynamic processing easier as both parse objects(for pasre implementaiton) and JSONObjects(for RESTful web service implementation) can be easily constructed using preconstructed maps. So it is important to note that any class that implements the SavableObjects interface should be able to be saved regardless of the method used for remote storage without changing any of the class code, assuming the toMap method is used. That being said, the only code that should need updating when changing remote storage methods is the code inside the async task.

Even though my implementation is used in the context of a single comment object constructed from info from the UI, this implementation design should also be applicable to lists of varying objects with minor changes to the activities code(again, assuming the objects have implemented the SavableObject interface and the toMap method is used).

Side note: When run, this code will make some toast messages appear, one at the start and one at the end of the async task. The save will always be unsuccessful as no real service is being called. Also, there is no validation to check for an empty comment or sql injection etc.
